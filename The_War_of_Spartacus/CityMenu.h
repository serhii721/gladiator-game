#pragma once
#include "IMenu.h"

class CityMenu
	: public IMenu
{
private:
	vector<HWND> hItems;
	vector<HWND> hSubItems;
	vector<HWND> hSubMenuItems;

	int selectedOpponent;
	int selectedItem;

	HBITMAP hBackgroundImage;
	HBRUSH hBackgroundBrush;

	PlayerAttributeStorage pas;

public:
	enum MenuItem
	{
		STAT_CITY_NAME,
		EDIT_MESSAGES_LOG,
		BUT_ARENA,
		BUT_QUEST,
		BUT_MARKET,
		BUT_CHARACTER,
		BUT_REST,
		BUT_MAP,
		BUT_MENU,
		ITEM_NUMBER
	};
	enum ArenaItem
	{
		ARENA_BUT_FIGHT,
		ARENA_BUT_TRAIN,
		ARENA_BUT_BACK,
		ARENA_ITEM_NUMBER
	};
	enum ArenaFightItem
	{
		ARENA_FIGHT_BUT_OPPONENT1,
		ARENA_FIGHT_BUT_OPPONENT2,
		ARENA_FIGHT_BUT_OPPONENT3,
		ARENA_FIGHT_BUT_OPPONENT4,
		ARENA_FIGHT_BUT_OPPONENT5,
		ARENA_FIGHT_BUT_OPPONENT6,
		ARENA_FIGHT_BUT_OPPONENT7,
		ARENA_FIGHT_BUT_OPPONENT8,
		ARENA_FIGHT_BUT_OPPONENT9,
		ARENA_FIGHT_BUT_OPPONENT10,
		ARENA_FIGHT_BUT_OPPONENT11,
		ARENA_FIGHT_BUT_OPPONENT12,
		ARENA_FIGHT_BUT_OPPONENT13,
		ARENA_FIGHT_BUT_OPPONENT14,
		ARENA_FIGHT_BUT_OPPONENT15,
		ARENA_FIGHT_STATIC_OPPONENTS,
		ARENA_FIGHT_STATIC_NAME,
		ARENA_FIGHT_STATIC_LEVEL,
		ARENA_FIGHT_STATIC_PORTRAIT,
		ARENA_FIGHT_STATIC_RIGHT_HAND_TYPE,
		ARENA_FIGHT_STATIC_RIGHT_HAND_DAMAGE,
		ARENA_FIGHT_STATIC_LEFT_HAND_TYPE,
		ARENA_FIGHT_STATIC_LEFT_HAND_DAMAGE,
		ARENA_FIGHT_STATIC_SHIELD_DEFENSE,
		ARENA_FIGHT_STATIC_SHIELD_BLOCK_CHANCE,
		ARENA_FIGHT_STATIC_HEALTH,
		ARENA_FIGHT_STATIC_ARMOUR_TYPE,
		ARENA_FIGHT_STATIC_ARMOUR_DEFENSE,
		ARENA_FIGHT_STATIC_STRENGTH,
		ARENA_FIGHT_STATIC_CONSTITUTION,
		ARENA_FIGHT_STATIC_DEXTERITY,
		ARENA_FIGHT_STATIC_INTELLIGENCE,
		ARENA_FIGHT_STATIC_WISDOM,
		ARENA_FIGHT_STATIC_CHARISMA,
		ARENA_FIGHT_STATIC_AGE,
		ARENA_FIGHT_STATIC_FAME,
		ARENA_FIGHT_STATIC_PLAYER_NAME,
		ARENA_FIGHT_STATIC_PLAYER_LEVEL,
		ARENA_FIGHT_STATIC_PLAYER_PORTRAIT,
		ARENA_FIGHT_STATIC_PLAYER_RIGHT_HAND_TYPE,
		ARENA_FIGHT_STATIC_PLAYER_RIGHT_HAND_DAMAGE,
		ARENA_FIGHT_STATIC_PLAYER_LEFT_HAND_TYPE,
		ARENA_FIGHT_STATIC_PLAYER_LEFT_HAND_DAMAGE,
		ARENA_FIGHT_STATIC_PLAYER_SHIELD_DEFENSE,
		ARENA_FIGHT_STATIC_PLAYER_SHIELD_BLOCK_CHANCE,
		ARENA_FIGHT_STATIC_PLAYER_HEALTH,
		ARENA_FIGHT_STATIC_PLAYER_ARMOUR_TYPE,
		ARENA_FIGHT_STATIC_PLAYER_ARMOUR_DEFENSE,
		ARENA_FIGHT_STATIC_PLAYER_STRENGTH,
		ARENA_FIGHT_STATIC_PLAYER_CONSTITUTION,
		ARENA_FIGHT_STATIC_PLAYER_DEXTERITY,
		ARENA_FIGHT_STATIC_PLAYER_INTELLIGENCE,
		ARENA_FIGHT_STATIC_PLAYER_WISDOM,
		ARENA_FIGHT_STATIC_PLAYER_CHARISMA,
		ARENA_FIGHT_STATIC_PLAYER_AGE,
		ARENA_FIGHT_STATIC_PLAYER_FAME,
		ARENA_FIGHT_BUT_BACK,
		ARENA_FIGHT_BUT_FIGHT,
		ARENA_FIGHT_ITEM_NUMBER
	};
	enum QuestItem
	{
		QUEST_BUT_LANISTA,
		QUEST_BUT_TALK_TO_PEOPLE,
		QUEST_BUT_BACK,
		QUEST_ITEM_NUMBER
	};
	enum LanistaItem
	{
		LANISTA_BUT_BUY_FREEDOM,
		LANISTA_BUT_ASK_FOR_PROMOTION,
		LANISTA_BUT_BACK,
		LANISTA_ITEM_NUMBER
	};
	enum MarketItem
	{
		MARKET_STAT_MARKET,
		MARKET_STAT_INVENTORY,
		MARKET_STAT_EQUIPMENT,
		MARKET_STAT_ITEM_TYPE,
		MARKET_STAT_ITEM_TIER,
		MARKET_STAT_ITEM_DAMAGE,
		MARKET_STAT_ITEM_DEFENSE,
		MARKET_STAT_ITEM_STRENGTH_SCALE,
		MARKET_STAT_ITEM_DEXTERITY_SCALE,
		MARKET_STAT_ITEM_SHIELD_CHANCE,
		MARKET_STAT_ITEM_SHIELD_BLOCK_DEFENSE,
		MARKET_STAT_ITEM_ARMOUR_ABILITY,
		MARKET_STAT_ITEM_VALUE,
		MARKET_STAT_ITEM_QUANTITY,
		MARKET_STAT_ITEM_TOTAL_VALUE,
		MARKET_STAT_TRADER_INVENTORY,
		MARKET_STAT_RIGHT_HAND,
		MARKET_STAT_LEFT_HAND,
		MARKET_STAT_ARMOUR,
		MARKET_STAT_INVENTORY_ITEM1,
		MARKET_STAT_INVENTORY_ITEM2,
		MARKET_STAT_INVENTORY_ITEM3,
		MARKET_STAT_INVENTORY_ITEM4,
		MARKET_STAT_INVENTORY_ITEM5,
		MARKET_STAT_INVENTORY_ITEM6,
		MARKET_STAT_INVENTORY_ITEM7,
		MARKET_STAT_INVENTORY_ITEM8,
		MARKET_STAT_INVENTORY_ITEM9,
		MARKET_STAT_INVENTORY_ITEM10,
		MARKET_STAT_INVENTORY_ITEM11,
		MARKET_STAT_INVENTORY_ITEM12,
		MARKET_STAT_INVENTORY_ITEM13,
		MARKET_STAT_INVENTORY_ITEM14,
		MARKET_STAT_TRADER_ITEM1,
		MARKET_STAT_TRADER_ITEM2,
		MARKET_STAT_TRADER_ITEM3,
		MARKET_STAT_TRADER_ITEM4,
		MARKET_STAT_TRADER_ITEM5,
		MARKET_STAT_TRADER_ITEM6,
		MARKET_STAT_TRADER_ITEM7,
		MARKET_STAT_TRADER_ITEM8,
		MARKET_STAT_TRADER_ITEM9,
		MARKET_STAT_TRADER_ITEM10,
		MARKET_STAT_TRADER_ITEM11,
		MARKET_STAT_TRADER_ITEM12,
		MARKET_STAT_TRADER_ITEM13,
		MARKET_STAT_TRADER_ITEM14,
		MARKET_BUT_SELL,
		MARKET_BUT_BUY,
		MARKET_BUT_RIGHT_HAND,
		MARKET_BUT_LEFT_HAND,
		MARKET_BUT_ARMOUR,
		MARKET_BUT_INVENTORY_ITEM1,
		MARKET_BUT_INVENTORY_ITEM2,
		MARKET_BUT_INVENTORY_ITEM3,
		MARKET_BUT_INVENTORY_ITEM4,
		MARKET_BUT_INVENTORY_ITEM5,
		MARKET_BUT_INVENTORY_ITEM6,
		MARKET_BUT_INVENTORY_ITEM7,
		MARKET_BUT_INVENTORY_ITEM8,
		MARKET_BUT_INVENTORY_ITEM9,
		MARKET_BUT_INVENTORY_ITEM10,
		MARKET_BUT_INVENTORY_ITEM11,
		MARKET_BUT_INVENTORY_ITEM12,
		MARKET_BUT_INVENTORY_ITEM13,
		MARKET_BUT_INVENTORY_ITEM14,
		MARKET_BUT_TRADER_ITEM1,
		MARKET_BUT_TRADER_ITEM2,
		MARKET_BUT_TRADER_ITEM3,
		MARKET_BUT_TRADER_ITEM4,
		MARKET_BUT_TRADER_ITEM5,
		MARKET_BUT_TRADER_ITEM6,
		MARKET_BUT_TRADER_ITEM7,
		MARKET_BUT_TRADER_ITEM8,
		MARKET_BUT_TRADER_ITEM9,
		MARKET_BUT_TRADER_ITEM10,
		MARKET_BUT_TRADER_ITEM11,
		MARKET_BUT_TRADER_ITEM12,
		MARKET_BUT_TRADER_ITEM13,
		MARKET_BUT_TRADER_ITEM14,
		MARKET_BUT_EQUIP_ITEM,
		MARKET_BUT_UNEQUIP_ITEM,
		MARKET_BUT_DESTROY_ITEM,
		MARKET_BUT_BACK,
		MARKET_ITEM_NUMBER
	};
	enum CharacterItem
	{
		CHARACTER_STAT_INFO,
		CHARACTER_STAT_NAME,
		CHARACTER_STAT_LEVEL,
		CHARACTER_STAT_EXPERIENCE,
		CHARACTER_STAT_PORTRAIT,
		CHARACTER_STAT_AGE,
		CHARACTER_STAT_FAME,
		CHARACTER_STAT_HEALTH,
		CHARACTER_STAT_EQUIPMENT,
		CHARACTER_STAT_RIGHT_HAND,
		CHARACTER_STAT_RIGHT_HAND_TYPE,
		CHARACTER_STAT_RIGHT_HAND_DAMAGE,
		CHARACTER_STAT_RIGHT_HAND_STRENGTH_SCALE,
		CHARACTER_STAT_RIGHT_HAND_DEXTERITY_SCALE,
		CHARACTER_STAT_LEFT_HAND,
		CHARACTER_STAT_LEFT_HAND_TYPE,
		CHARACTER_STAT_LEFT_HAND_DAMAGE,
		CHARACTER_STAT_LEFT_HAND_STRENGTH_SCALE,
		CHARACTER_STAT_LEFT_HAND_DEXTERITY_SCALE,
		CHARACTER_STAT_SHIELD_DEFENSE,
		CHARACTER_STAT_SHIELD_BLOCK_CHANCE,
		CHARACTER_STAT_ARMOUR,
		CHARACTER_STAT_ARMOUR_TYPE,
		CHARACTER_STAT_ARMOUR_DEFENSE,
		CHARACTER_STAT_ARMOUR_STRENGTH_SCALE,
		CHARACTER_STAT_ARMOUR_DEXTERITY_SCALE,
		CHARACTER_STAT_ARMOUR_ABILITY,
		CHARACTER_STAT_UNNASSIGNED_ATTRIBUTES,
		CHARACTER_STAT_STRENGTH,
		CHARACTER_STAT_CONSTITUTION,
		CHARACTER_STAT_DEXTERITY,
		CHARACTER_STAT_INTELLIGENCE,
		CHARACTER_STAT_WISDOM,
		CHARACTER_STAT_CHARISMA,
		CHARACTER_STAT_INVENTORY,
		CHARACTER_STAT_INVENTORY_ITEM1_NAME,
		CHARACTER_STAT_INVENTORY_ITEM2_NAME,
		CHARACTER_STAT_INVENTORY_ITEM3_NAME,
		CHARACTER_STAT_INVENTORY_ITEM4_NAME,
		CHARACTER_STAT_INVENTORY_ITEM5_NAME,
		CHARACTER_STAT_INVENTORY_ITEM6_NAME,
		CHARACTER_STAT_INVENTORY_ITEM7_NAME,
		CHARACTER_STAT_INVENTORY_ITEM8_NAME,
		CHARACTER_STAT_INVENTORY_ITEM9_NAME,
		CHARACTER_STAT_INVENTORY_ITEM10_NAME,
		CHARACTER_STAT_INVENTORY_ITEM11_NAME,
		CHARACTER_STAT_INVENTORY_ITEM12_NAME,
		CHARACTER_STAT_INVENTORY_ITEM13_NAME,
		CHARACTER_STAT_INVENTORY_ITEM14_NAME,
		CHARACTER_BUT_STRENGTH_PLUS,
		CHARACTER_BUT_CONSTITUTION_PLUS,
		CHARACTER_BUT_DEXTERITY_PLUS,
		CHARACTER_BUT_INTELLIGENCE_PLUS,
		CHARACTER_BUT_WISDOM_PLUS,
		CHARACTER_BUT_CHARISMA_PLUS,
		CHARACTER_BUT_STRENGTH_MINUS,
		CHARACTER_BUT_CONSTITUTION_MINUS,
		CHARACTER_BUT_DEXTERITY_MINUS,
		CHARACTER_BUT_INTELLIGENCE_MINUS,
		CHARACTER_BUT_WISDOM_MINUS,
		CHARACTER_BUT_CHARISMA_MINUS,
		CHARACTER_BUT_RESET_CHANGES,
		CHARACTER_BUT_APPLY_CHANGES,
		CHARACTER_BUT_INVENTORY_ITEM1,
		CHARACTER_BUT_INVENTORY_ITEM2,
		CHARACTER_BUT_INVENTORY_ITEM3,
		CHARACTER_BUT_INVENTORY_ITEM4,
		CHARACTER_BUT_INVENTORY_ITEM5,
		CHARACTER_BUT_INVENTORY_ITEM6,
		CHARACTER_BUT_INVENTORY_ITEM7,
		CHARACTER_BUT_INVENTORY_ITEM8,
		CHARACTER_BUT_INVENTORY_ITEM9,
		CHARACTER_BUT_INVENTORY_ITEM10,
		CHARACTER_BUT_INVENTORY_ITEM11,
		CHARACTER_BUT_INVENTORY_ITEM12,
		CHARACTER_BUT_INVENTORY_ITEM13,
		CHARACTER_BUT_INVENTORY_ITEM14,
		CHARACTER_BUT_RIGHT_HAND,
		CHARACTER_BUT_LEFT_HAND,
		CHARACTER_BUT_ARMOUR,
		CHARACTER_BUT_INVENTORY_UNEQUIP_ITEM,
		CHARACTER_BUT_INVENTORY_EQUIP_ITEM,
		CHARACTER_BUT_INVENTORY_INSPECT_ITEM,
		CHARACTER_BUT_INVENTORY_DESTROY_ITEM,
		CHARACTER_BUT_BACK,
		CHARACTER_ITEM_NUMBER
	};

	CityMenu();
	CityMenu(HWND);
	CityMenu(const CityMenu&);
	CityMenu& operator=(const CityMenu&);
	virtual ~CityMenu();

	void drawMenu(HWND, HDC, int, int) override;
	void resizeMenu(int, int) override;
	void handleInput(HWND, UINT, WPARAM, LPARAM) override;
	bool stylizeWindow(HWND, UINT, WPARAM, LPARAM, LRESULT&) override;

private:
	void outputMarketItem(HWND, unique_ptr<Item>&, int quantity_ = 1);
	void outputOpponent(HWND, int selectedOpponent_);
	void drawInventoryItem(HWND, LPDRAWITEMSTRUCT, Inventory&, int buttonIndex_, bool isPushed_ = false);
	void drawEquippedItem(HWND, LPDRAWITEMSTRUCT, int itemIndex_, bool isPushed_ = false);
	void inspectItem(HWND, unique_ptr<Item>, int quantity_ = 1);
	void manageInventory(HWND, int selectedItem_);
	void manageMarketItems(HWND, int selectedItem_);
};
